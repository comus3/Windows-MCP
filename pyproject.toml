[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-windows-dev"
version = "1.0.0"
description = "A secure Model Context Protocol (MCP) server for Windows environments with granular access controls"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "MCP Windows Team", email = "dev@mcp-windows.local"},
]
keywords = ["mcp", "windows", "development", "security", "sandbox", "model-context-protocol", "ai", "assistant"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Win32 (MS Windows)",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: Microsoft :: Windows :: Windows 10",
    "Operating System :: Microsoft :: Windows :: Windows 11",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: System :: Systems Administration",
    "Topic :: Security",
    "Typing :: Typed",
]

dependencies = [
    "mcp>=1.6.0",
    "pywin32>=306",
    "psutil>=5.9.0",
    "aiofiles>=23.0.0",
    "aioshutil>=1.3",
    "asyncio-throttle>=1.0.2",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "cryptography>=42.0.0",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
    "structlog>=24.1.0",
    "colorlog>=6.8.0",
    "pathspec>=0.12.1",
    "watchdog>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "black>=24.0.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "types-PyYAML>=6.0.12",
    "types-psutil>=5.9.5",
    "tomli>=2.0.0",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
"Homepage" = "https://github.com/comus3/Windows-MCP"
"Bug Reports" = "https://github.com/comus3/Windows-MCP/issues"
"Source" = "https://github.com/comus3/Windows-MCP"
"Documentation" = "https://mcp-windows.readthedocs.io"

[project.scripts]
mcp-windows = "mcp_windows.main:main"
mcp-windows-configure = "mcp_windows.tools.configure:main"

[tool.setuptools]
package-dir = {"" = "src"}
include-package-data = true
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]
include = ["mcp_windows", "mcp_windows.*"]

[tool.setuptools.package-data]
mcp_windows = [
    "config/*.yaml", 
    "config/*.yml",
    "py.typed"
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "COM",  # flake8-commas
    "PL",   # pylint
    "SIM",  # flake8-simplify
    "RUF",  # ruff specific rules
]
ignore = [
    "PLR0913",  # Too many arguments
    "COM812",   # Missing trailing comma
    "E501",     # Line too long (handled by black)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "win32.*",
    "winreg",
    "pywin32.*",
    "structlog.*",
    "colorlog.*",
    "asyncio_throttle.*",
    "aioshutil.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--cov=mcp_windows",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "windows: marks tests that require Windows",
    "admin: marks tests that require admin privileges",
]

[tool.coverage.run]
source = ["src/mcp_windows"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]